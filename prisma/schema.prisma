generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Producto {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String
  precio      Decimal // Ajustamos el tipo de dato para MySQL
  precioComparacion Decimal? 
  archivos    Archivo[]
  categoriaId Int?
  categoria   Categoria? @relation(fields: [categoriaId], references: [id])
  stock       Int?      @default(0) 
  slug        String    @unique // URL amigable, generada a partir del nombre
  metaTitulo  String?   // Título de la página en los resultados de búsqueda
  metaDescripcion String? // Descripción breve que aparece en los resultados de búsqueda
  variantes   Variante[]
  sku         String?   @unique // SKU (Stock Keeping Unit) para identificación interna
  codigoBarra String?   @unique // Código de barras para lectura con escáner
  etiquetas ProductoEtiqueta[]
  estado      Boolean   @default(true) // Indica si el producto está activo o no
  proveedorId Int?
  proveedor   Proveedor? @relation(fields: [proveedorId], references: [id])
  secciones Seccion[]
  resenas Resena[]
  pedidosProducto PedidoProducto[]
}

model Proveedor {
  id        Int       @id @default(autoincrement())
  nombre    String
  contacto  String?
  // ... otros campos relevantes del proveedor (dirección, teléfono, etc.)
  productos Producto[]
}

model Variante {
  id          Int             @id @default(autoincrement())
  nombre      String          // Nombre de la variante (e.g., "Color", "Material")
  productoId  Int
  producto    Producto         @relation(fields: [productoId], references: [id])
  opciones    OpcionVariante[]
}

model OpcionVariante {
  id         Int      @id @default(autoincrement())
  valor      String   // Valor específico de la opción (e.g., "Rojo", "Algodón")
  precio      Decimal? 
  stock       Int?      @default(0) 
  varianteId Int
  variante   Variante  @relation(fields: [varianteId], references: [id])
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nombre    String
  email     String    @unique
  password  String
  pedidos   Pedido[]
  resenas Resena[]
}

model Pedido {
  id         Int       @id @default(autoincrement())
  fecha      DateTime  @default(now()) 

  // Relación opcional con el usuario
  usuarioId  Int?
  usuario    Usuario?  @relation(fields: [usuarioId], references: [id])
 productos PedidoProducto[]
  estado     String    @default("pendiente") 
  direccionEnvio String
  nombresapellidos String
  celular      String
  referencia   String? // Referencia de la dirección (opcional)
  provincia    String
  distrito     String
  correoElectronico String?
  // Nuevos campos
  notas      String?  
  cantidad   Int      
  total      Decimal
  pagado     Decimal
  etiquetas PedidoEtiqueta[]
  metodoPago String // Almacena el método de pago utilizado (e.g., "tarjeta", "efectivo", "transferencia")
  codigoDescuento String?  // Código de descuento aplicado (opcional)
  nombreDescuento String?  // Nombre del descuento aplicado (opcional)

}

model PedidoProducto {
    pedidoId  Int
    productoId Int
    pedido    Pedido  @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
    producto  Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)

    @@id([pedidoId, productoId])
}

model Seccion {
  id        Int       @id @default(autoincrement())
  nombre    String    // Nombre de la sección (e.g., "Características", "Reseñas", "Productos relacionados")
  strapiId    String? // ID de la entrada de Strapi correspondiente a esta sección (opcional)
  productos Producto[]
}

model Categoria {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique
  productos Producto[]
  slug        String    @unique 
  metaTitulo  String?  
  metaDescripcion String? 
  descripcion String?   // Descripción opcional de la categoría
  archivos    Archivo[] // Relación con archivos multimedia (imágenes, etc.)
}

model Resena {
  id          Int      @id @default(autoincrement())
  estado      String   // Estado de la reseña (e.g., "aprobada", "pendiente", "rechazada")
  usuarioId   Int?     // Relación opcional con Usuario
  usuario     Usuario? @relation(fields: [usuarioId], references: [id])
  nombre      String?  // Nombre del autor de la reseña (si no está registrado)
  productoId  Int?     // Relación opcional con Producto
  producto    Producto? @relation(fields: [productoId], references: [id])
  titulo       String
  comentario   String
  localizacion String?
  imagenUrl    String?
  fechaCreacion DateTime @default(now())
}

model Etiqueta {
  id    Int    @id @default(autoincrement())
  nombre String @unique
  productos ProductoEtiqueta[]
  pedidos  PedidoEtiqueta[]
}

model ProductoEtiqueta {
  productoId Int
  etiquetaId Int
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  etiqueta   Etiqueta @relation(fields: [etiquetaId], references: [id], onDelete: Cascade)

  @@id([productoId, etiquetaId])
}

model PedidoEtiqueta {
  pedidoId  Int
  etiquetaId Int
  pedido    Pedido  @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  etiqueta  Etiqueta @relation(fields: [etiquetaId], references: [id], onDelete: Cascade)

  @@id([pedidoId, etiquetaId])
}

model Archivo {
  id        Int    @id @default(autoincrement())
  url       String 
  tipo      String 
  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id])
  categoriaId Int?    // Asegúrate de que este campo esté definido
  categoria   Categoria? @relation(fields: [categoriaId], references: [id])
}

model DuenoTienda {
  id        Int      @id @default(autoincrement())
  nombre    String
  email     String    @unique
  password  String
}